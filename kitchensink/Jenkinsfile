/* Jenkins Plugins and Packages needed
1. Maven Integration plugin
2. Pipeline Maven Integration Plugin : https://plugins.jenkins.io/pipeline-maven
3. Maven Name set in Global Configuration Tool
4. Static Analysis Collector Plug-in 
4. JDK 8 or Higher
5. Script path /kitchensink/Jenkinsfile

Fix for: "[WARNING] Cannot get the branch information from the git repository: 
Detecting the current branch failed: fatal: ref HEAD is not a symbolic ref"

In the Jenkins Job, add this option:
Git Repositories -> Additional Behaviours -> Check out to specific local branch

*/

def source_repo_checkout() {
    stage ('Checkout') {
      echo 'git checkout'
      checkout scm 
      def repo_url = sh(returnStdout: true, script: 'git config remote.origin.url').trim()
      getRepoName = load "kitchensink/getRepoName.groovy"
      reponame = getRepoName.getRepoName(repo_url)
      print "The repo name is -> ${reponame}"  
    }
}
    
def list_repo_name() {
        repo_url = scm.getUserRemoteConfigs()[0].getUrl()
        reponame = getRepoName.getRepoName('repo_url')
        reponame     
        getRepoName.getRepoName('repo_url')
    }                  

def build_war() {
    stage ('Build war') {
    //def mvnHome = tool 'M3'  
    //Use Maven pipeline Plugin
    // Maven installation name declared in the Jenkins "Global Tool Configuration"
        withMaven(maven: 'M3') {
            dir ('kitchensink') {
                sh "ls -l"
                echo 'Running -> mvn clean compile'
                sh "mvn clean compile"
            }
        }
    }    
}

def build_package() {
    stage ('Package') { 
    //Use Maven pipeline Plugin
    // Maven installation name declared in the Jenkins "Global Tool Configuration"
        withMaven(maven: 'M3'){
            dir ('kitchensink') {
                sh "ls -l"
                echo 'Running -> mvn package'
                sh "mvn package"
            }
        }
    }    
}

def build_archive() {
    stage ('Archive') {
        echo 'Archiving Package'
        dir ('kitchensink') {
            sh "ls -l"
            archiveArtifacts artifacts: 'target/kitchensink-sources.jar'
        }
    }    
}
    
node {
    
    currentBuild.result = "SUCCESS"
    try {
            
        //Stage 1 : Checkout Source control
        source_repo_checkout()       
        
        // Stage 2 : Build  War
        build_war()
        
        // Stage 3 : Build Pacakge
        build_package()
        
        //Stage 4: Archive
        build_archive()
        
    }
    
   catch (err) {
    
        currentBuild.result = "FAILED"
       
         /* mail body: "Project build FAILED is here: ${env.BUILD_URL}",
             from: 'xxx@domain.com',
             replyTo: 'xyz@domain.com',
             subject: 'Project build failed',
             to: 'abc@domain.com'
        
        */
        throw err 
        
    }
}
